<?php
function apachesolr_file_apachesolr_entity_info_alter(&$entity_info) {
  $entity_info['file']['indexable'] = TRUE;
  $entity_info['file']['status callback'] = 'apachesolr_file_status_callback';
  $entity_info['file']['document callback'][] = 'apachesolr_file_solr_document';
  $entity_info['file']['reindex callback'] = 'apachesolr_file_solr_reindex';
  $entity_info['file']['index_table'] = 'apachesolr_media_files';
  $entity_info['file']['result callback'] = 'apachesolr_file_result';
}

/**
 * @file
 * Integrates the Media module with apache solr
 * so that media files can be searched.
 *
 * This module will index any file attached to a
 * node's field_resources_tab field.
 */

define('APACHESOLR_MEDIA_NAMESPACE', 'apachesolr_media');
define('APACHESOLR_MEDIA_VARIABLE_GROUP', 'apachesolr_media');


/**
 * Implements hook_variable_group_info().
 */
function apachesolr_media_variable_group_info() {
  $groups = array();

  $groups[APACHESOLR_MEDIA_VARIABLE_GROUP] = array(
    'title' => t('Apache Solr Media settings'),
    'description' => t('Apache Solr Media settings'),
  );

  return $groups;
}

/**
 * Implements hook_variable_info().
 */
function apachesolr_media_variable_info($options) {
  $variable['apachesolr_media_cron_try'] = array(
    'title' => t('apachesolr_media_cron_try', array(), $options),
    'default' => 20,
    'group' => APACHESOLR_MEDIA_VARIABLE_GROUP,
  );
  $variable['apachesolr_media_cron_limit'] = array(
    'title' => t('apachesolr_media_cron_limit', array(), $options),
    'default' => 100,
    'group' => APACHESOLR_MEDIA_VARIABLE_GROUP,
  );
  $variable['apachesolr_media_cron_time_limit'] = array(
    'title' => t('apachesolr_media_cron_time_limit', array(), $options),
    'default' => 15,
    'group' => APACHESOLR_MEDIA_VARIABLE_GROUP,
  );
  $variable['apachesolr_media_title_field'] = array(
    'title' => t('apachesolr_media_title_field', array(), $options),
    'group' => APACHESOLR_MEDIA_VARIABLE_GROUP,
  );

  return $variable;
}

/**
 * Implements hook_menu().
 */
function apachesolr_media_menu() {
  /*
  $items = array();
  $items['admin/config/search/apachesolr/media'] = array(
    'title' => 'Media',
    'description' => 'Administer Apache Solr Media.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_media_admin_page'),
    'access arguments' => array('administer search'),
    'file' => 'apachesolr_media.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
  */
}


/**
 * Implements hook_file_update().
 *
 * Notifies solr when a file attached to a node
 * has been updated.
 */
function apachesolr_media_file_update($file) {
  _apachesolr_media_notify_solr_of_file_update($file);
}

/**
 * Implements hook_file_delete().
 *
 * Notifies solr when a file attached to a node
 * has been deleted.
 *
 * Technically this should never be an issue
 * since Drupal shouldn't let a user delete
 * a file if it's in use by any nodes.
 */
function apachesolr_media_file_delete($file) {
  _apachesolr_media_notify_solr_of_file_update($file);
}

/**
 * Implements hook_search_info().
 *
 * @see apachesolr_search_search_info()
 */
function apachesolr_media_search_info() {
  // We dont want a search tab, so set to same as apachesolr_search.
  return array(
    'title' => 'File',
    'path' => 'file',
    'conditions_callback' => 'apachesolr_search_conditions',
  );
}

/**
 * Implements hook_search_status().
 *
 * @see apachesolr_search_search_status()
 */
function apachesolr_media_search_status() {
  // TODO: Figure out a way to know how many actual files are left to update.
  return apachesolr_index_status(APACHESOLR_MEDIA_NAMESPACE);
}


/**
 * Implements hook_apachesolr_document_handlers().
 *
 * @see apachesolr_search_apachesolr_document_handlers()
 */
function apachesolr_media_apachesolr_document_handlers($type, $namespace) {
  if ($type == 'node' && $namespace == APACHESOLR_MEDIA_NAMESPACE) {
    return array('apachesolr_media_add_documents');
  }
}

/**
 * Implements hook_update_index().
 *
 * Search content types and add any field that is a file type that we know how
 * to parse and any uploaded file attachments.
 *
 * @see apachesolr_search_cron()
 */
function apachesolr_media_update_index() {
    $start = REQUEST_TIME;
    $cron_try = variable_get('apachesolr_media_cron_try', 20);
    $cron_limit = variable_get('apachesolr_media_cron_limit', 100);
    $cron_time_limit = variable_get('apachesolr_media_cron_time_limit', 15);
    $num_tried = 0;

    do {
      $rows = apachesolr_media_get_nodes_to_index(APACHESOLR_MEDIA_NAMESPACE, $cron_try);
      $success = apachesolr_index_nodes($rows, APACHESOLR_MEDIA_NAMESPACE);
      $num_tried += $cron_try;
    } while ($success && ($num_tried < $cron_limit) && (REQUEST_TIME - $start < $cron_time_limit));
}

/**
 * Returns an array of rows from a query based on an indexing namespace.
 */
function apachesolr_media_get_nodes_to_index($namespace, $limit) {
  $rows = array();
  if (apachesolr_environment_variable_get(apachesolr_default_environment(), 'apachesolr_read_only', APACHESOLR_READ_WRITE) == APACHESOLR_READ_ONLY) {
    return $rows;
  }
  /*
  $excluded_types = apachesolr_get_excluded_types($namespace);
  list($last_change, $last_nid) = apachesolr_get_last_change($namespace);
  $query = db_select('apachesolr_search_node', 'asn')
    ->fields('asn', array('nid', 'changed'))
    ->condition('asn.status', 1)
    ->condition(db_or()->condition('asn.changed', $last_change, '>')->condition(db_and()->condition('asn.changed', $last_change)->condition('asn.nid', $last_nid, '>')))
    ->orderBy('asn.changed', 'ASC')
    ->orderBy('asn.nid', 'ASC')
    ->range(0, $limit);
  apachesolr_query_add_excluded_types($query, $excluded_types);
  $result = $query->execute();
  */
  return $result;
}



/**
 * Callback for apachesolr_index_nodes().
 *
 * Adds a document for each indexable file attachment for the given node ID.
 *
 * @see apachesolr_node_to_document()
 */
function apachesolr_media_add_documents($node, $namespace) {
  $documents = array();
  $hash = apachesolr_site_hash();
  // Let any module exclude this node from the index.
  $build_document = _apachesolr_media_build_document($node, $namespace);

  if ($build_document) {
    $files = _apachesolr_media_get_files($node);

    foreach ($files as $file) {
      $text = _apachesolr_media_get_file_text($file);

      if ($text) {
        $document = _apachesolr_media_create_document($hash, $file, $node, $namespace, $text);

        $documents[] = $document;
      }
      else {
        watchdog('Apache Solr Media', 'Could not extract any indexable text from %file', array('%file' => print_r($file, TRUE)), WATCHDOG_WARNING);
      }
    }
  }

  if (COUNT($documents) > 0) {
    watchdog('Apache Solr Media', 'Submitting %count media files from node "%node" to Solr.',
            array('%count' => COUNT($documents), '%node' => $node->title . '[' . $node->nid . ']'),
            WATCHDOG_INFO);
  }

  return $documents;
}

/**
 * Return all non-excluded file attachments for a particular node
 */
function apachesolr_media_get_indexable_files($node) {
  $files = array();

  $field_names = apachesolr_media_get_field_names();
  foreach ($field_names as $field_name) {
    if (isset($node->$field_name) && !empty($node->$field_name)) {
      $field = $node->$field_name;
      list($lang, $values) = each($field);
      $files = array_merge($files, $values);
    }
  }

  $file_list = array();
  foreach ($files as $file) {
    $file_object = file_load($file['fid']);
    $file_list[$file['fid']] = $file_object;
    if (function_exists('media_translation_get_translated_files')) {
      // Get translated versions of files if defined
      //$translated_files = media_translation_get_translated_files($file_object);
      foreach ($translated_files as $translated_file) {
        $file_list[$translated_file->fid] = file_load($translated_file->fid);
      }
    }
  }

  return $file_list;
}

/**
 * Return all fields that are of type 'file'
 */
function apachesolr_media_get_field_names() {
  $field_names = variable_get('apachesolr_media_file_fields', array());
  if (!is_array($field_names)) {
    $field_names = array($field_names);
  }
  $field_names = array_filter($field_names);

  return $field_names;
}

/**
 * Extracts the text from any fields attached to the
 * file to be included in the searchable text.
 *
 * @param array $file
 * The file object being indexed.
 */
function _apachesolr_media_get_file_field_contents($file) {
  $text = '';
  // Add the file name minus extension
  $filename = explode('.', $file->filename);
  if (count($filename) > 1) {
    array_pop($filename);
  }
  $filename = implode('.', $filename);
  $text .= ' ' . $filename . ' ';
  $fields = field_info_fields();
  foreach ($fields as $field_name => $field) {
    if ($field['type'] != 'taxonomy_term_reference') { // Only non-taxonomy fields.
      if (isset($file->$field_name) && !empty($file->$field_name) && is_array($file->$field_name)) {
        // Can't chain reset(), parameters are by reference (specifically it operates on the __zval
        $items = reset($file->$field_name);
        $item = reset($items);
        // QUESTION: Will the 'value' key always be the first item in the array?
        $content = reset($item); // Assumes structure Field[language][index][value]
        $text .= apachesolr_clean_text($content) . ' ';
      }
    }
  }

  return $text;
}

/**
 * Gets the custom title for the file from the title field.
 *
 * @param object $file
 * The file object.
 *
 * @return string
 * Either the custom title for the file or
 * the filename if a title is not specified.
 */
function _apachesolr_media_get_file_title_from_field($file) {
  $title = $file->filename;
  return $title;
}

/**
 * Tell solr that a file attached to a node has been
 * updated so that it and it's related nodes will be re-indexed.
 *
 * @param object $file
 * The file that was updated.
 */
function _apachesolr_media_notify_solr_of_file_update($file) {
  // See where this file is used
  // We use a direct query rather than file_usage_list()
  // because file_usage_list() only returns a single node
  // that references the file and we need all nodes to update.
  $usage = db_query("SELECT id FROM {file_usage} WHERE fid = :fid", array(':fid' => $file->fid));
  foreach ($usage as $item) {
    apachesolr_mark_node($item->id);
  }
}

/**
 * See if this node should be excluded from the index.
 * @param type $node
 * @param type $namespace
 * @return boolean
 * TRUE if the document should be indexed, FALSE if the document should not be indexed.
 */
function _apachesolr_media_build_document($node, $namespace) {
  $build_document = TRUE;
  foreach (module_implements('apachesolr_node_exclude') as $module) {
    $exclude = module_invoke($module, 'apachesolr_node_exclude', $node, $namespace);
    if (!empty($exclude)) {
      $build_document = FALSE;
    }
  }

  return $build_document;
}

/**
 * Get a list of files to index on the node.
 * @param type $node
 * @return array
 */
function _apachesolr_media_get_files($node) {
  // Since there is no notification for an attachment being unassociated with a
  // node (but that action will trigger it to be indexed again), we check for
  // fids that were added before but no longer present on this node.
  $fids = array();
  $result = db_query("SELECT fid FROM {apachesolr_media_files} WHERE nid = :nid", array(':nid' => $node->nid));
  foreach ($result as $row) {
    $fids[$row->fid] = $row->fid;
  }

  $files = apachesolr_media_get_indexable_files($node);

  // Find deleted files.
  $missing_fids = array_diff_key($fids, $files);
  if ($missing_fids) {
    db_update('apachesolr_media_files')->fields(array('removed' => 1))->condition('fid', $missing_fids, 'IN')->execute();
  }
  $new_files = array_diff_key($files, $fids);

  // Add new files.
  foreach ($new_files as $file) {
    db_insert('apachesolr_media_files')->fields(array(
      'fid' => $file->fid,
      'nid' => $node->nid,
      'removed' => 0,
      'hash' => '',
    ))->execute();
  }

  return $files;
}

/**
 * Retrieves teh text content of the file and associated fields.
 * @param type $file
 * @return string
 */
function _apachesolr_media_get_file_text($file) {
  $text = '';
  $text .= _apachesolr_media_get_file_field_contents($file);

  return $text;
}

/**
 * Create the document object to submit to Solr.
 *
 * @param type $hash
 * @param type $file
 * @param type $node
 * @param type $namespace
 * @return ApacheSolrDocument
 */
function _apachesolr_media_create_document($hash, $file, $node, $namespace, $text) {
  $document = new ApacheSolrDocument();
  $document->id = apachesolr_document_id($file->fid, 'file');
  $document->site = url(NULL, array('absolute' => TRUE));
  $document->hash = $hash;
  $document->entity_type = 'file';
  $document->entity_id = $file->fid;
  $document->bundle = 'file';
  $document->bundle_name = file_get_type($file);
  $document->label = _apachesolr_media_get_file_title_from_field($file);
  $document->url = 'file/' . $file->fid;
  $document->path = 'file/' . $file->fid;

  $document->content = $file->filename . ' ' . $text;

  $document->ss_name = _apachesolr_media_get_file_title_from_field($file);
  // We want the name to ale be searchable for keywords.
  $document->tos_name = _apachesolr_media_get_file_title_from_field($file);

  // Everything else uses dynamic fields
  $document->is_uid = $file->uid;
  $document->bs_status = $file->status;
  $document->bs_sticky = 0;
  $document->bs_promote = 0;
  $document->ds_created = apachesolr_date_iso($file->timestamp);
  $document->ds_changed = $document->ds_created;

  if (module_exists('media_translation')) {
    if (isset($file->i18n_tsid)) {
      $document->is_tnid = $file->i18n_tsid;
      $document->bs_translate = $file->i18n_tsid > 0;
    }
    if (isset($file->language) && !empty($file->language)) {
      $document->ss_language = $file->language;
    }
    else {
      $document->ss_language = LANGUAGE_NONE;
    }
  }

  // Add taxonomy to document.
  $indexed_fields = apachesolr_entity_fields('file');
  foreach ($indexed_fields as $index_key => $field_info) {
    if ($field_info['field']['type'] == 'taxonomy_term_reference') { // Add only taxonomy.
      $field_name = $field_info['field']['field_name'];
      // See if the node has fields that can be indexed
      if (isset($file->$field_name)) {
        // Got a field.
        $function = $field_info['indexing_callback'];
        if ($function && function_exists($function)) {
          // NOTE: This function should always return an array.  One
          // node field may be indexed to multiple Solr fields.
          $fields = $function($file, $field_name, $index_key, $field_info);
          foreach ($fields as $field) {
            // It's fine to use this method also for single value fields.
            $document->addField($field['key'], $field['value']);
          }
        }
      }
    }
  }

  // Let modules add to the document.
  foreach (module_implements('apachesolr_update_index') as $module) {
    $function = $module . '_apachesolr_update_index';
    $function($document, $node, $namespace);
  }

  // @todo: This cant work.  drupal_alter supports a max of 3 params.  $namespace is cut off.
  drupal_alter('apachesolr_media_index', $document, $node, $file, $namespace);

  return $document;
}
