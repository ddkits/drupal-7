<?php

/**
 * @file
 * Provides a configurable meta refresh when viewing individual nodes.
 */

/**
 * Settings form.
 */
function refresh_admin() {
  $form = array();
  $form['refresh_default_value'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'data-type' => 'number',
    ),
    '#title' => t('Default value for auto refresh'),
    '#default_value' => variable_get('refresh_default_value', 0),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("If you want all nodes to refresh by default, provide a number of seconds. Enter <em>0</em> to disable. This value will be overriden on nodes with custom value entered."),
    '#required' => TRUE,
  );
  $form['refresh_default_value_all_pages'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable for non-node pages also'),
    '#default_value' => variable_get('refresh_default_value_all_pages', FALSE),
    '#description' => t("Check this box if you also want all pages, even non-nodes, to be auto-refreshed."),
  );

  return system_settings_form($form);
}

/**
 * Settings form validation callback.
 */
function refresh_admin_validate($form, &$form_state) {
  $maxdisp = $form_state['values']['refresh_default_value'];
  if (!is_numeric($maxdisp)) {
    form_set_error('refresh_default_value', t('You must enter an integer for the default refresh value.'));
  }
  elseif ($maxdisp < 0) {
    form_set_error('refresh_default_value', t('Number of seconds should be positive.'));
  }
}


/**
 * Implements hook_menu().
 */
function refresh_menu() {
  $items = array();
  $items['admin/config/user-interface/refresh'] = array(
    'title' => 'Refresh module settings',
    'description' => 'Optionally set default value for refresh on every node.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('refresh_admin'),
    'access arguments' => array('administer refreshes'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Implements hook_permission().
 *
 * Creates two new permissions: one to create refreshes and one the change
 * the global settings of the module.
 */
function refresh_permission() {
  return array(
    'create refreshes' => array(
      'title' => t('Create refresh settings'),
      'description' => t('Create refresh settings for nodes'),
    ),
    'administer refreshes' => array(
      'title' => t('Change refresh settings'),
      'description' => t('Change global refresh settings'),
    ),
  );
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Adds a refresh group and numeric edit field to the node editing form.
 */
function refresh_form_node_form_alter(&$form, $form_state) {
  $refresh = '';
  $destination = '';

  if (isset($form['#node']->refresh)) {
    $refresh = $form['#node']->refresh;
  }

  if (isset($form['#node']->destination)) {
    $destination =  $form['#node']->destination;
  }

  $form['refresh'] = array(
    '#type' => 'fieldset',
    '#title' => t('Refresh settings'),
    '#collapsible' => TRUE,
    '#collapsed' => empty($refresh),
    '#access' => user_access('create refreshes'),
    '#weight' => 30,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('refresh-form'),
    ),
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'refresh') . '/refresh.js'),
    ),
  );
  $form['refresh']['refresh'] = array(
    '#title' => t('Duration in seconds'),
    '#type' => 'textfield',
    '#default_value' => $refresh,
    '#maxlength' => 3,
    '#size' => 10,
    '#description' => t('Optionally provide a number of seconds after which the node page refreshes.'),
  );

  $form['refresh']['destination'] = array(
    '#title' => t('Destination URL'),
    '#type' => 'textfield',
    '#default_value' => $destination,
    '#description' => t('Optionally provide a full url to a destination, if no url is given it will refresh to the current node.'),
  );
}

/**
 * Implements hook_node_view().
 *
 * Add a refresh tag when viewing the node by itself, not as a teaser.
 */
function refresh_node_view($node, $view_mode) {
  $custom_node_refresh = $node->refresh;
  $global_refresh_value = variable_get('refresh_default_value', 0);
  $use_global_refresh = variable_get('refresh_default_value_all_pages', FALSE);

  // TODO: add check for editing nodes using overlay
  if (($view_mode == 'full') && node_is_page($node)) {
    if ($custom_node_refresh === FALSE && $global_refresh_value) {
      if ($use_global_refresh) {
        $content = check_plain($global_refresh_value);
        if (!empty($node->destination)) {
          $content .= '; URL=' . $node->destination;
        }
        $element = array(
          '#tag' => 'meta',
          '#attributes' => array(
            'http-equiv' => 'refresh',
            'content' => $content,
          ),
        );
      }
    }
    elseif ($custom_node_refresh) {
      $content = check_plain($custom_node_refresh);
      if (!empty($node->destination)) {
        $content .= '; URL=' . $node->destination;
      }
      $element = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'http-equiv' => 'refresh',
          'content' => $content,
        ),
      );
    }
    if (isset($element)) {
      drupal_add_html_head($element, 'refresh');
    }
  }
}

/**
 * Implements hook_node_load().
 */
function refresh_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    $result = db_query("SELECT seconds, destination FROM {node_refresh} WHERE nid = :nid AND vid = :vid", array('nid' => $node->nid, 'vid' => $node->vid))->fetchAssoc();
    $nodes[$nid]->refresh = $result['seconds'];
    $nodes[$nid]->refresh_default = variable_get('refresh_default_value', 0) ? variable_get('refresh_default_value', 0) : FALSE;
    $nodes[$nid]->destination = $result['destination'];
  }
}

/**
 * Implements hook_preprocess_html().
 */
function refresh_preprocess_html(&$variables) {
  $menu = menu_get_object();
  // If we are in a node, return. Hook_node_load will take over.
  if ($menu && isset($menu->nid)) {
    return;
  }

  // If we are on admin pages, return.
  if (path_is_admin(current_path())) {
    return;
  }

  $global_refresh_all_pages = variable_get('refresh_default_value_all_pages', FALSE);
  $global_refresh_value = variable_get('refresh_default_value', 0);
  if (!$global_refresh_value || !$global_refresh_all_pages) {
    return;
  }

  $element = array(
    '#tag' => 'meta',
    '#attributes' => array(
      'http-equiv' => 'refresh',
      'content' => check_plain($global_refresh_value),
    ),
  );

  drupal_add_html_head($element, 'refresh');
}

/**
 * Implements hook_node_delete().
 */
function refresh_node_delete($node) {
  if (user_access('create refreshes') || user_access('administer refreshes')) {
    db_query("DELETE FROM {node_refresh} WHERE nid = :nid AND vid = :vid", array('nid' => $node->nid, 'vid' => $node->vid));
  }
}

/**
 * Implements hook_node_validate().
 */
function refresh_node_validate($node, $form, &$form_state) {
  if (user_access('create refreshes') || user_access('administer refreshes')) {
    $refresh = trim($node->refresh);
    if ((drupal_strlen($refresh) > 0) && (!ctype_digit($refresh) || ((int)$refresh < 0))) {
      form_set_error('refresh', t('The refresh number is invalid. Please a non-negative number of seconds.'));
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function refresh_node_insert($node) {
  if (user_access('create refreshes') || user_access('administer refreshes')) {
    if ($node->refresh !== FALSE && $node->refresh !== '' && (int) $node->refresh >= 0) {
      db_query("INSERT INTO {node_refresh} (nid, vid, seconds, destination) VALUES (:nid, :vid, :seconds, :destination)", array('nid' => $node->nid, 'vid' => $node->vid, 'seconds' => (int) $node->refresh, 'destination' => $node->destination));
    }
  }
}

/**
 * Implements hook_node_update().
 */
function refresh_node_update($node) {
  if (user_access('create refreshes') || user_access('administer refreshes')) {
    db_query("DELETE FROM {node_refresh} WHERE nid = :nid AND vid = :vid", array('nid' => $node->nid, 'vid' => $node->vid));
    if ($node->refresh !== FALSE && $node->refresh !== '' && (int) $node->refresh >= 0) {
      db_query("INSERT INTO {node_refresh} (nid, vid, seconds, destination) VALUES (:nid, :vid, :seconds, :destination)", array('nid' => $node->nid, 'vid' => $node->vid, 'seconds' => (int) $node->refresh, 'destination' => $node->destination));
    }
  }
}
